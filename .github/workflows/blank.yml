name: Fetch Public IP Using Puppeteer and Tor

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Manual trigger configuration

jobs:
  fetch-ip-hashes:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: [1, 2, 3, 4, 5]  # Define a matrix of 5 instances

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up Tor
        run: |
          sudo apt-get update
          sudo apt-get install -y tor
          sudo service tor start
          
      - name: Wait for Tor to start
        run: sleep 10  # Giving Tor time to start

      - name: Install Chrome and Dependencies
        run: |
          sudo apt-get install -y libx11-xcb1 libxtst6 libxrandr2 libgtk-3-0 libnss3 libasound2 libatk-bridge2.0-0 libxss1 libgbm1

      - name: Install Puppeteer
        run: |
          npm install puppeteer

      - name: Create Puppeteer Script
        run: |
          echo "const puppeteer = require('puppeteer');" > continuous_visit_puppeteer.js
          echo "const { execSync } = require('child_process');" >> continuous_visit_puppeteer.js
          echo "" >> continuous_visit_puppeteer.js
          echo "async function fetchIP(proxy = false) {" >> continuous_visit_puppeteer.js
          echo "  const args = proxy ? ['--proxy-server=socks5://127.0.0.1:9050'] : [];" >> continuous_visit_puppeteer.js
          echo "  const browser = await puppeteer.launch({" >> continuous_visit_puppeteer.js
          echo "    headless: true," >> continuous_visit_puppeteer.js
          echo "    args: ['--no-sandbox', '--disable-setuid-sandbox', '--incognito', '--js-flags=--optimize-for-size --max-old-space-size=2048', ...args]" >> continuous_visit_puppeteer.js
          echo "  });" >> continuous_visit_puppeteer.js
          echo "  const page = await browser.newPage();" >> continuous_visit_puppeteer.js
          echo "  try {" >> continuous_visit_puppeteer.js
          echo "    await page.goto('https://icanhazip.com', { waitUntil: 'domcontentloaded', timeout: 30000 });" >> continuous_visit_puppeteer.js
          echo "    const ip = await page.evaluate(() => document.body.innerText.trim());" >> continuous_visit_puppeteer.js
          echo "    console.log(proxy ? 'IP after Tor: ' : 'IP before Tor: ', ip);" >> continuous_visit_puppeteer.js
          echo "    return ip;" >> continuous_visit_puppeteer.js
          echo "  } catch (error) {" >> continuous_visit_puppeteer.js
          echo "    console.error('Failed to fetch IP:', error.message);" >> continuous_visit_puppeteer.js
          echo "    return null;" >> continuous_visit_puppeteer.js
          echo "  } finally {" >> continuous_visit_puppeteer.js
          echo "    await browser.close();" >> continuous_visit_puppeteer.js
          echo "  }" >> continuous_visit_puppeteer.js
          echo "}" >> continuous_visit_puppeteer.js
          echo "" >> continuous_visit_puppeteer.js
          echo "async function restartTor() {" >> continuous_visit_puppeteer.js
          echo "  console.log('Restarting Tor...');" >> continuous_visit_puppeteer.js
          echo "  execSync('sudo service tor stop');" >> continuous_visit_puppeteer.js
          echo "  execSync('sudo service tor start');" >> continuous_visit_puppeteer.js
          echo "  console.log('Waiting for Tor to restart...');" >> continuous_visit_puppeteer.js
          echo "  await new Promise(resolve => setTimeout(resolve, 30000));  // Wait 30 seconds" >> continuous_visit_puppeteer.js
          echo "}" >> continuous_visit_puppeteer.js
          echo "" >> continuous_visit_puppeteer.js
          echo "async function fetchIPWithTorRetry() {" >> continuous_visit_puppeteer.js
          echo "  let ip = null;" >> continuous_visit_puppeteer.js
          echo "  while (!ip) {" >> continuous_visit_puppeteer.js
          echo "    ip = await fetchIP(true);" >> continuous_visit_puppeteer.js
          echo "    if (!ip) {" >> continuous_visit_puppeteer.js
          echo "      await restartTor();" >> continuous_visit_puppeteer.js
          echo "    }" >> continuous_visit_puppeteer.js
          echo "  }" >> continuous_visit_puppeteer.js
          echo "}" >> continuous_visit_puppeteer.js
          echo "" >> continuous_visit_puppeteer.js
          echo "async function visitWebsite(url) {" >> continuous_visit_puppeteer.js
          echo "  let browser, page;" >> continuous_visit_puppeteer.js
          echo "  let success = false;" >> continuous_visit_puppeteer.js
          echo "  while (!success) {" >> continuous_visit_puppeteer.js
          echo "    try {" >> continuous_visit_puppeteer.js
          echo "      execSync('sudo service tor start');  // Ensure Tor is running before each visit" >> continuous_visit_puppeteer.js
          echo "      console.log('Tor started before visiting the website.');" >> continuous_visit_puppeteer.js
          echo "" >> continuous_visit_puppeteer.js
          echo "      browser = await puppeteer.launch({" >> continuous_visit_puppeteer.js
          echo "        headless: true," >> continuous_visit_puppeteer.js
          echo "        args: ['--proxy-server=socks5://127.0.0.1:9050', '--no-sandbox', '--disable-setuid-sandbox', '--incognito', '--js-flags=--optimize-for-size --max-old-space-size=4096']" >> continuous_visit_puppeteer.js
          echo "      });" >> continuous_visit_puppeteer.js
          echo "      page = await browser.newPage();" >> continuous_visit_puppeteer.js
          echo "      await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });" >> continuous_visit_puppeteer.js
          echo "      const title = await page.title();" >> continuous_visit_puppeteer.js
          echo "      console.log('Page title:', title);" >> continuous_visit_puppeteer.js
          echo "      success = true;" >> continuous_visit_puppeteer.js
          echo "" >> continuous_visit_puppeteer.js
          echo "      // Extract and log 'Hashes per second' every 20 seconds" >> continuous_visit_puppeteer.js
          echo "      const checkHashesPerSecond = setInterval(async () => {" >> continuous_visit_puppeteer.js
          echo "        try {" >> continuous_visit_puppeteer.js
          echo "          const hashesPerSecond = await page.evaluate(() => {" >> continuous_visit_puppeteer.js
          echo "            const element = document.querySelector('#hps');" >> continuous_visit_puppeteer.js
          echo "            return element ? element.textContent.replace('Hashes per second: ', '').trim() : 'Element not found';" >> continuous_visit_puppeteer.js
          echo "          });" >> continuous_visit_puppeteer.js
          echo "          console.log('Hashes per second:', hashesPerSecond);" >> continuous_visit_puppeteer.js
          echo "        } catch (error) {" >> continuous_visit_puppeteer.js
          echo "          console.error('Error fetching Hashes per second:', error.message);" >> continuous_visit_puppeteer.js
          echo "        }" >> continuous_visit_puppeteer.js
          echo "      }, 20000);  // Every 20 seconds" >> continuous_visit_puppeteer.js
          echo "" >> continuous_visit_puppeteer.js
          echo "      // Wait for random time between 30 to 45 minutes on the website" >> continuous_visit_puppeteer.js
          echo "      const stayTime = Math.floor(Math.random() * (45 - 30 + 1) + 30) * 60 * 1000;" >> continuous_visit_puppeteer.js
          echo "      console.log('Staying on the website for', stayTime / 60000, 'minutes...');" >> continuous_visit_puppeteer.js
          echo "      await new Promise(resolve => setTimeout(resolve, stayTime));  // Random wait between 30 to 45 minutes" >> continuous_visit_puppeteer.js
          echo "" >> continuous_visit_puppeteer.js
          echo "      // Stop checking the hashes per second" >> continuous_visit_puppeteer.js
          echo "      clearInterval(checkHashesPerSecond);" >> continuous_visit_puppeteer.js
          echo "      await browser.close();" >> continuous_visit_puppeteer.js
          echo "" >> continuous_visit_puppeteer.js
          echo "      execSync('sudo service tor stop');  // Stop Tor after closing the browser" >> continuous_visit_puppeteer.js
          echo "      console.log('Tor stopped after visiting the website.');" >> continuous_visit_puppeteer.js
          echo "    } catch (error) {" >> continuous_visit_puppeteer.js
          echo "      console.error('Failed to visit website:', error.message);" >> continuous_visit_puppeteer.js
          echo "      if (browser) await browser.close();" >> continuous_visit_puppeteer.js
          echo "      await restartTor(); // Restart Tor if navigation fails" >> continuous_visit_puppeteer.js
          echo "    }" >> continuous_visit_puppeteer.js
          echo "  }" >> continuous_visit_puppeteer.js
          echo "}" >> continuous_visit_puppeteer.js
          echo "" >> continuous_visit_puppeteer.js
          echo "async function randomWait() {" >> continuous_visit_puppeteer.js
          echo "  const waitTime = Math.floor(Math.random() * (5 - 2 + 1) + 2) * 60 * 1000;  // Random wait between 2 to 5 minutes" >> continuous_visit_puppeteer.js
          echo "  console.log('Waiting for', waitTime / 60000, 'minutes before next visit...');" >> continuous_visit_puppeteer.js
          echo "  await new Promise(resolve => setTimeout(resolve, waitTime));" >> continuous_visit_puppeteer.js
          echo "}" >> continuous_visit_puppeteer.js
          echo "" >> continuous_visit_puppeteer.js
          echo "async function fetchIPsAndVisit() {" >> continuous_visit_puppeteer.js
          echo "  await fetchIP(false);  // Fetch IP without Tor" >> continuous_visit_puppeteer.js
          echo "  await fetchIPWithTorRetry();  // Fetch IP with Tor, retry until successful" >> continuous_visit_puppeteer.js
          echo "  while (true) {" >> continuous_visit_puppeteer.js
          echo "    execSync('sudo service tor start');  // Start Tor before each visit" >> continuous_visit_puppeteer.js
          echo "    console.log('Tor started before visiting the website.');" >> continuous_visit_puppeteer.js
          echo "" >> continuous_visit_puppeteer.js
          echo "    await fetchIP(true);  // Show public IP after starting Tor" >> continuous_visit_puppeteer.js
          echo "    await visitWebsite('https://dileepa1.netlify.app');" >> continuous_visit_puppeteer.js
          echo "    await randomWait();" >> continuous_visit_puppeteer.js
          echo "  }" >> continuous_visit_puppeteer.js
          echo "}" >> continuous_visit_puppeteer.js
          echo "" >> continuous_visit_puppeteer.js
          echo "fetchIPsAndVisit();" >> continuous_visit_puppeteer.js
          
      - name: Run Puppeteer Script
        run: node continuous_visit_puppeteer.js
